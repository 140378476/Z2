//
// Created by liyicheng on 2019/7/2.
//

#ifndef HOMEWORK_BASICUTIL_H
#define HOMEWORK_BASICUTIL_H

#include <exception>
#include <string>
#include <functional>
#include <memory>

using namespace std;
namespace ancono{
/**
 * Assures that the given `expr` is `true`. Throws an `invalid_argument` exception holding the given message if `expr` is `false`.
 */
void require(bool expr, const std::string& message);
/**
 * Assures that the given `expr` is `true`. Throws an `invalid_argument` exception if `expr` is `false`.
 */
void require(bool expr);
/**
 * Assures that the given `expr` is `true`. If `expr` is `false`, throws an `invalid_argument` exception, whose message will be
 * set to the string generated by `f`.
 */
void require(bool expr, const std::function<std::string()>& f);


/**
 * Assures that the given `pointer` is not null. Throws an `invalid_argument` exception if `pointer` is null.
 */
template <typename T> void requireNotNull(T* pointer){
    require(pointer != nullptr, "The object must not be null!");
}


template <typename T> void requireNotNull(const shared_ptr<T>& ptr) {
    require(ptr.get() != nullptr, "The object must not be null!");
}

long long  currentTimeMillis();

}

#endif //HOMEWORK_BASICUTIL_H
